import time


class Пицца:
    """Класс Пицца содержит общие атрибуты для пиццы.

    Дочерние классы будут их конкретизировать.
    """

    def __init__(self):
        """Конструктор класса.

        Инициализирует атрибуты пиццы (значения по умолчанию).
        """
        self.название = "Заготовка"
        self.тесто = "тонкое"  # тонкое или пышное
        self.соус = "кечтуп"   # или другой
        self.начинка = []      # список начинок (по умолчанию - нет)

        self.цена = 0

    def __str__(self):
        """Вернуть информацию о пицце: название, тесто, соус, начинка.

        Формат вывода:

        Пицца: Пепперони | Цена: 350.00 р.
        Тесто: тонкое Соус: томатный
        Начинка: пепперони, сыр моцарелла
        """

        return ('Пицца: {0.название} | Цена: {0.цена}.\nТесто: \
{0.тесто} Соус: {0.соус}\nНачинка: '.format(self) + ', '.join(self.начинка))

    def подготовить(self):
        """Сообщить о процессе подготовки.

        Формат вывода:

        Начинаю готовить пиццу Пепперони
          - замешиваю тонкое тесто...
          - добавляю соус: томатный...
          - и, конечно: пепперони, сыр моцарелла...
        """
        prep = ['Начинаю готовить пиццу {}'.format(self.название),
                '  - замешиваю {} тесто...'.format(self.тесто),
                '  - добавляю соус: {}...'.format(self.соус),
                '  - и, конечно: ' + ', '.join(self.начинка) + '...']
        if not self.начинка:
            del prep[-1]
        for i in prep:
            print(i)
            time.sleep(0.3)

    def испечь(self):
        """Сообщить о процессе запекания пиццы.

        Формат вывода: произвольное сообщение.
        """
        bake = ['Начинаю печь пиццу {}'.format(self.название),
                '  - {} тесто покрывается корочкой...'.format(self.тесто),
                '  - получение соков от: ' + ', '.join(self.начинка) + '...']
        if not self.начинка:
            del bake[-1]
        for i in bake:
            print(i)
            time.sleep(0.3)

    def нарезать(self):
        """Сообщить о процессе нарезки.

        Формат вывода: произвольное сообщение.
        """
        cut = ['Начинаю резать пиццу {}'.format(self.название),
               'Количество кусочков:', '-2...', '-4...', '-6...', '-8...', ]
        for i in cut:
            print(i)
            time.sleep(0.2)

    def упаковать(self):
        """Сообщить о процессе упаковки.

        Формат вывода: произвольное сообщение.
        """
        cut = ['Начинаю упаковывать пиццу {}'.format(self.название),
               'Ход упаковки:', '25%', '50%', '75%', '100%!', ]
        for i in cut:
            print(i)
            time.sleep(0.2)


class ПиццаПепперони(Пицца):
    """Класс ПиццаПепперони дополняет класс Пицца."""

    def __init__(self):
        super().__init__()
        self.название = "Пепперони"
        self.тесто = "тонкое"
        self.соус = "томатный"
        self.начинка = ['пепперони', 'овощи']

        self.цена = 400


class ПиццаБарбекю(Пицца):
    """Класс ПиццаБарбекю дополняет класс Пицца."""

    def __init__(self):

        super().__init__()
        self.название = "Барбекю"
        self.тесто = "тонкое"
        self.соус = "барбекю"
        self.начинка = ['индейка', 'овощи']

        self.цена = 450


class ПиццаДарыМоря(Пицца):
    """Класс ПиццаДарыМоря дополняет класс Пицца."""

    def __init__(self):
        super().__init__()
        self.название = "Дары Моря"
        self.тесто = "тонкое"
        self.соус = "голандский"
        self.начинка = ['креветки', 'мясо краба', 'осминоги', 'овощи']

        self.цена = 550


'''a=ПиццаПепперони()
b=str(a)
print(b)
a.подготовить()
a.начинка.append('бекон')
a.название='death'
print(a)
a.упаковать()
a.испечь()
a.нарезать()'''
